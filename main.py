# Mr. Brescacin - ICS3U
# Brenden Iannetta
# Month Day, 2022

# Collapse The Dictionary To Hide Comments.
{
    # 0-80%
    # Write a program that will simulate a guessing game. The computer will generate a random number between 1 and 100. It will then prompt the user to guess the number that was generated by the computer. After the user makes each guess, the program must tell the user whether the guess was too high or too low. Continue prompting the user for a guess until the proper number is guessed.
    
    # The game ends when the user either guesses the correct answer or exceeds the maximum of 7 attempts allowed by the program. The program must let the user know how many attempts were used to guess the correct value generated by the computer. After the game is over, the user is then asked whether they would like to play again. If yes, the game runs again, if no the game ends.
    
    
    # 80-90%
    # If the user chooses to stop the program, stats from the games played should be displayed to the user. Number of games played, Number of correct guesses and number of incorrect guesses (times they didn't guess the number in 7 attempts or less).
    
    # 90%-100%
    # Complete the above two feature sections and include a stat that tells the player their shortest number of attempts for a correct guess and also their longest number of attempts for a correct guess. Also, tell them the closest they have been to the random number on their first guess for all attempts.
}

# The stats look cool when you play at least 2 games.

# Import random, math, termcolor, os, and time.
import random
import time
import os
from termcolor import cprint, colored

# Debugging thing.
sleepDur = 2

# Clear screen function.
cls = lambda : os.system('clear')

# Set the start and end vars.
start = 1
end = 100

# Set which round the user is on.
roundNum = 0

# Set the variable for the number of correct guesses, total games, total attempts, and incorrect guesses.
correctGuesses = 0
incorrectGuesses = 0
totalAttempts = 0
totalGames = 1

# Declare whole game stats on global scope for playing again feature.
results = []

while True:
    roundNum += 1
    
    # Declare stats.
    attempt = 1
    guesses = []
    
    # Generate the number.
    target = random.randint(start, end)
    
    while True:
        # Get the users guess.
        guess = input(f"Round {roundNum}:\n\nGuess a number in between or equal to {start}-{end} (Attempt {attempt}/7)\n\n> ")
        cls()

        # Check for validity.
        if not guess.isdigit():
            cprint("That was not a number! Try again...", "red")
            time.sleep(sleepDur)
            cls()
            continue
    
        guess = int(guess)
    
        if (guess > end) or (guess < start):
            cprint(f"That number was not in between or equal to {start}-{end}! Try again...", "red")
            time.sleep(sleepDur)
            cls()
            continue

        # Compare the user's guess against the target number. Print if the user guessed too high and vice versa. If the user guessed correct, pack all of the useful data into a dictionary, then add it to a list for later processing.
        if guess == target:
            # If the user guessed the number correct, append all of the data then break out of the loop.
            guesses.append(
                colored(
                    guess,
                    'green',
                    attrs=['bold', 'underline']
                )
            )
            cprint(f"You correctly guessed the number! ({guess}) It took you {attempt} attempt(s).", 'green', attrs=['bold'])
            results.append(
                {
                    "round": roundNum,
                    "target": target,
                    "distanceFromNumOnFirst": '0 (First Guess)' if attempt == 1 else abs(int(guesses[0]) - target),
                    "guesses": guesses,
                    "attempts": attempt,
                    "successful": True
                }
            )
            correctGuesses += 1
            totalAttempts += 1
            break
        else:
            totalAttempts += 1
            guesses.append(str(guess))
            if attempt == 7:
                results.append(
                    {
                        "round": roundNum,
                        "target": target,
                        "distanceFromNumOnFirst": abs(int(guesses[0]) - target),
                        "guesses": guesses,
                        "attempts": attempt,
                        "successful": False
                    }
                )
                cprint(f"You couldn't guess the number within 7 attempts! The number was {target}.", 'red', attrs=['bold'])
                incorrectGuesses += 1
                break
            cprint(f'You guessed too {"low" if guess < target else "high"}! Try again...', 'yellow', attrs=['bold'])
            time.sleep(sleepDur)
            cls()
            attempt += 1
            continue
    # Ask the user if they want to play again, if so then iterate over the while loop once more. Else, move onto the game results.
    print()
    playAgain = input("Would you like to play again? (y/n)\n\n> ")
    cls()

    if playAgain == 'y':
        totalGames += 1
        continue
    else:
        break

# Initialize an array to find out how many attempts it took the player to guess the correct number. For each instance where the player guesses the correct number, document the number of attempts that player had to make. Then, use the max() and min() functions to determine the shortest number of attempts that the player made.
attemptsForCorrectGuesses = []
for i in results:
    if i['successful']:
        attemptsForCorrectGuesses.append(i['attempts'])

# Check if the user ever guessed correctly. If they did, get the min() and max(). Else, assign the variables to N/A.
if len(attemptsForCorrectGuesses) > 0:
    shortestAttempts = min(attemptsForCorrectGuesses)
    longestAttempts = max(attemptsForCorrectGuesses)
else:
    shortestAttempts = longestAttempts = colored('N/A (No Correct Guesses)', "red")

# Print all of the game stats. Print the total correct guesses, incorrect guesses, total games played, total number of guesses made, and the number of attempts made for a correct guess (shortest and longest).
cprint("Game Results:", attrs=['bold', 'underline'])
print()
print()
print(colored("Total Correct Guesses:", 'green', attrs=['bold']), correctGuesses)
print(colored("Total Incorrect Guesses:", 'red', attrs=['bold']), incorrectGuesses)
print()
print(colored("Total Games:", 'yellow', attrs=['bold']), totalGames)
print(colored("Total Attempts:", 'yellow', attrs=['bold']), totalAttempts)
print()
print(colored("Shortest Number Of Attempts For A Correct Guess:", 'blue', attrs=['bold']), shortestAttempts)
print(colored("Longest Number Of Attempts For A Correct Guess:", 'blue', attrs=['bold']), longestAttempts)
print()
print(colored("Win Percentage:", 'magenta', attrs=['bold']), str(round(correctGuesses / totalGames * 100)) + "%")

# Iterate through all of the games played and display their stats indiviually by round. Display the attempts needed, target number for that round, all of the guesses the user made, and the distance the user was from the target on their first guess.
for i in results:
    print()
    print()
    print('--------------')
    print()
    print()
    print(colored(f"Round {i['round']}", attrs=['bold']), colored('(You Won)', 'green') + ":" if i['successful'] else colored('(You Lost)', 'red') + ":")
    print()
    print(colored("Attempts Used:", attrs=['bold']), i['attempts'])
    print(colored("Target Number:", attrs=['bold']), i['target'])
    print(colored("Your Guesses (Comma Delimited):", attrs =['bold']), f"{', '.join(i['guesses'])}")
    print(colored("Distance From Target On First Guess:", attrs =['bold']),  f"{i['distanceFromNumOnFirst']} (Your First Guess: {i['guesses'][0]})")